import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from app.database import add_user, add_message, get_unanswered_messages, respond_to_message, get_chat_id, get_message, \
    get_all_users
from app.keyboards import user_keyboard, admin_keyboard, create_admin_inline_keyboard

API_TOKEN = '7071804207:AAEjKYbRNlAZf23aMkz67qBr_cy1wkaNoQM'
ADMIN_USER_ID = [427368318]  # –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–æ–≤

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()


class HelpMessage(StatesGroup):
    message_id = State()
    chat_id = State()
    message_send = State()


class AnswerMessage(StatesGroup):
    waiting_for_reply = State()


@router.message(Command("start"))
async def start(message: Message):
    user = message.from_user
    if user.id in ADMIN_USER_ID:
        keyboard = admin_keyboard
    else:
        keyboard = user_keyboard
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç! –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å.', reply_markup=keyboard)




@router.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    await state.set_state(HelpMessage.message_send)
    await message.reply('–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.')


@router.message(F.text == '–ü–æ–º–æ—â—å')
async def help_button(message: Message, state: FSMContext):
    await help_command(message, state)


@router.message(F.text == '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def list_users_button(message: Message):
    if message.from_user.id in ADMIN_USER_ID:
        await list_users(message)
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


@router.message(F.text == '–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
async def list_unanswered_button(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_USER_ID:
        await list_unanswered(message, state)
    else:
        await message.reply('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')


@router.message(Command("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
async def list_users(message: Message):
    if message.from_user.id not in ADMIN_USER_ID:
        return
    users = await get_all_users()
    user_list = "\n".join([f'{user[1]}: {user[2]} {user[3]}' for user in users])
    await message.reply(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{user_list}')


@router.message(Command("–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"))
async def list_unanswered(message: Message, state: FSMContext):
    if message.from_user.id not in ADMIN_USER_ID:
        return
    unanswered = await get_unanswered_messages()
    if not unanswered:
        await message.reply('–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.')
        return
    for msg in unanswered:
        keyboard = create_admin_inline_keyboard(msg[0])
        await message.reply(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg[1]}:\n"{msg[2]}"', reply_markup=keyboard)


@router.callback_query(F.data.startswith('reply_'))
async def handle_reply_callback(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.from_user.id not in ADMIN_USER_ID:
        await callback_query.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', show_alert=True)
        return
    message_id = callback_query.data.split('_')[1]
    await state.update_data(message_id=message_id)
    await state.set_state(AnswerMessage.waiting_for_reply)
    await callback_query.message.reply(f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}.')
    await callback_query.answer()


@router.message(F.text)
async def handle_message(message: Message, state: FSMContext):
    data = await state.get_data()
    current_state = await state.get_state()

    if current_state == AnswerMessage.waiting_for_reply.state:
        # –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.from_user.id in ADMIN_USER_ID:
            db_message_id = data['message_id']
            await respond_to_message(db_message_id, message.text)
            await message.reply(f'–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {db_message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')

            user_chat_id = await get_chat_id(db_message_id, 1)
            original_message = await get_message(db_message_id, 1)
            await bot.send_message(user_chat_id[0],
                                   f'‚ùì –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n <b>{original_message[0]}</b>\n\n'
                                   f'üó£ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n <b><i>{message.text}</i></b>',
                                   parse_mode='HTML')
            await state.clear()
        else:
            print('–û—à–∏–±–∫–∞: —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞, –Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.')
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.from_user.id not in ADMIN_USER_ID:
            user_message = message.text
            user = message.from_user
            db_message_id = await add_message(user.id, user_message)
            await state.update_data(message_id=db_message_id, chat_id=message.chat.id)
            await message.reply(f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}" –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')
            await state.clear()
        else:
            print('–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.')

