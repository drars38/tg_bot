import datetime
import logging
from environs import Env
from dotenv import dotenv_values
from aiogram import Bot, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from app.database import (
    add_message, get_unanswered_messages, respond_to_message, get_chat_id, get_message,
    get_all_users, check_user_or_registr, get_history,
    get_black_list, add_user, get_blocked_user_message,
    add_to_black_list, add_to_black_list, unban_user, get_username
)
from app.keyboards import (
    login_keyboard, user_keyboard, admin_keyboard,
    create_admin_inline_keyboard, user_keyboard_after_login, banned_user, company_info,
    unban_user_keyboard
)

config = dotenv_values()

logging.basicConfig(level=logging.INFO)
env = Env()
env.read_env()
ADMIN_USER_ID = env.list("ADMINS")
black_list = []

router = Router()

class HelpMessage(StatesGroup):
    message_id = State()
    chat_id = State()
    message_send = State()

class AnswerMessage(StatesGroup):
    waiting_for_reply = State()

@router.message(Command("start"))
async def start(message: Message):
    await message.reply(f'üëã–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=login_keyboard)

@router.message(F.contact)
async def login(message: Message):
    check = await check_user_or_registr(message.from_user.id)
    id = str(message.from_user.id)
    msg = await get_blocked_user_message(id)
    if check:
        if id in ADMIN_USER_ID:
            await message.answer('üëã–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, <b>'+ message.from_user.full_name +'</b>', parse_mode='HTML', reply_markup=admin_keyboard)
        elif id in black_list:
            await message.reply(f'üè¥–£–≤—ã, –≤—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ :(\n'
                                f'–∑–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}' )
            return
        else:
            await message.answer('üëã–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, <b>'+ message.from_user.full_name +'</b>', parse_mode='HTML', reply_markup=user_keyboard_after_login)
    else:
        if id in ADMIN_USER_ID:
            await add_user(message.from_user.id,message.from_user.username, message.contact.phone_number, message.from_user.full_name)
            await message.answer(f'‚úîÔ∏è–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, <b>{message.from_user.full_name}</b>!',
                                 parse_mode='HTML', reply_markup=admin_keyboard)
        else:
            await add_user(message.from_user.id, message.contact.phone_number, message.from_user.full_name)
            await message.answer(f'‚úîÔ∏è–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, <b>{message.from_user.full_name}</b>!',
                                 parse_mode='HTML', reply_markup=user_keyboard_after_login)

@router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
async def history(message: Message):
    user = message.from_user.id
    history = await get_history(user)
    if history:
        user_history = "\n".join([f'‚ùì: <b>{messages[0]}</b>\nüîé: <i>{messages[1]}</i> \n \n' for messages in history])
        await message.answer(user_history, parse_mode='HTML')
    else:
        await message.answer('üò≠–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\nü¶æ—É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è <b>:(</b>', parse_mode='HTML')

@router.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    await state.set_state(HelpMessage.message_send)
    await message.reply('–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. üõ†Ô∏è')

@router.message(F.text == '–ü–æ–º–æ—â—å')
async def help_button(message: Message, state: FSMContext):
    user_id = message.from_user.id
    black_list = await get_black_list()
    if user_id in black_list:
        await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=banned_user)
    else:
        await help_command(message, state)

@router.message(F.text == '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def list_users_button(message: Message):
    if str(message.from_user.id) in ADMIN_USER_ID:
        await list_users(message)
    else:
        await message.reply('‚ùå‚ùå‚ùå–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.‚ùå‚ùå‚ùå')

@router.message(F.text == '–°–ø–∏—Å–æ–∫ –±–∞–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def black_list_users_button(message: Message):
    black_list = await get_black_list()
    if not black_list:
        await message.answer(f'–ó–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç')
    else:
        for i in black_list:
            msg = str(await get_blocked_user_message(str(i)))
            keyboard = unban_user_keyboard(str(i))
            await message.answer(f'üè¥–ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{str(i)}</b> –∏–∑-–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è - <b>{msg}</b>', parse_mode='HTML', reply_markup=keyboard)

@router.message(F.text == '–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è')
async def list_unanswered_button(message: Message, state: FSMContext):
    if str(message.from_user.id) in ADMIN_USER_ID:
        await list_unanswered(message, state)
    else:
        await message.reply('‚ùå‚ùå‚ùå–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.‚ùå‚ùå‚ùå')

@router.message(Command("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"))
async def list_users(message: Message):
    if str(message.from_user.id) not in ADMIN_USER_ID:
        await message.answer(f'–í—ã –Ω–µ –∞–¥–º–∏–Ω')
        return
    users = await get_all_users()
    user_list = "\n".join([f'{user[1]}: {user[2]} {user[3]}' for user in users])
    await message.reply(f'–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{user_list}')

@router.message(Command("–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"))
async def list_unanswered(message: Message, state: FSMContext):
    if str(message.from_user.id) not in ADMIN_USER_ID:
        return
    unanswered = await get_unanswered_messages()
    if not unanswered:
        await message.reply('–ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.')
        return
    for msg in unanswered:
        keyboard = create_admin_inline_keyboard(msg[0])
        first_name = await get_username(str(msg[1]))
        await message.reply(f'–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <a href="tg://user?id={msg[1]}">{first_name[0]}</a>:\n"{msg[2]}"', reply_markup=keyboard, parse_mode='HTML')

@router.callback_query(F.data.startswith('reply_'))
async def handle_reply_callback(callback_query: CallbackQuery, state: FSMContext):
    if str(callback_query.from_user.id) not in ADMIN_USER_ID:
        await callback_query.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', show_alert=True)
        return
    message_id = callback_query.data.split('_')[1]
    await state.update_data(message_id=message_id)
    await state.set_state(AnswerMessage.waiting_for_reply)
    await callback_query.message.reply(f'–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}.')
    await callback_query.answer()

@router.callback_query(F.data.startswith('unban_'))
async def handle_unban_callback(callback_query: CallbackQuery, bot: Bot):
    if str(callback_query.from_user.id) not in ADMIN_USER_ID:
        await callback_query.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', show_alert=True)
        return
    user_id = callback_query.data.split('_')[1]
    await unban_user(user_id)
    await callback_query.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω.')
    await bot.send_message(str(user_id), '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ãüéâ', reply_markup=user_keyboard_after_login)

@router.callback_query(F.data.startswith('ban_'))
async def handle_ban_callback(callback_query: CallbackQuery, bot: Bot):
    if str(callback_query.from_user.id) not in ADMIN_USER_ID:
        await callback_query.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.', show_alert=True)
        return
    message_id = callback_query.data.split('_')[1]
    user = await get_chat_id(message_id, 0)
    msg = await get_message(message_id, 0)
    await add_to_black_list(user[0], msg[0])
    await callback_query.answer(f'üè¥–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user[0]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫üè¥')
    await bot.send_message(user[0], f'üè¥–í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>{msg[0]}</b>', parse_mode='HTML', reply_markup=banned_user)



@router.message(F.text == '–û –∫–æ–º–ø–∞–Ω–∏–∏')
async def info(message: Message):
    await message.reply('–¢—É—Ç –±–æ–ª—å—à–∞—è –∏—Å—Ç–æ—Ä–∏—è', reply_markup=company_info)

@router.message(F.text == '–ù–æ–≤–æ—Å—Ç–∏ "–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç–∏"')
async def investors(message: Message):
    await message.reply('–ù–æ–≤–æ—Å—Ç–∏')

@router.message(F.text == '–ö–ª–∏–µ–Ω—Ç–∞–º')
async def clients(message: Message, bot: Bot):
    await message.reply(f'–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
                        f'–û—Ç–¥–µ–ª –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞\n'
                        f'–¢–µ–ª–µ—Ñ–æ–Ω—ã: +7 (3953) 300-701, +7 (3953) 300-709\n'
                        f'Email: vsmn@vsmn.transneft.ru')
    await bot.send_location(message.from_user.id, 56.313259, 101.739587)

@router.message(F.text)
async def handle_message(message: Message, state: FSMContext, bot: Bot):
    await bot.send_chat_action(message.from_user.id, action="typing")
    data = await state.get_data()
    current_state = await state.get_state()
    user_id = message.from_user.id
    black_list = await get_black_list()
    if str(user_id) in black_list:
        await message.reply('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.')
        return
    else:
        if current_state == AnswerMessage.waiting_for_reply.state:
            if str(user_id) in map(str, ADMIN_USER_ID):
                db_message_id = data['message_id']
                await respond_to_message(db_message_id, message.text)
                await message.reply(f'‚úÖ–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {db_message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
                user_chat_id = await get_chat_id(db_message_id, 1)
                original_message = await get_message(db_message_id, 1)
                await bot.send_message(user_chat_id[0],
                                       f'‚ùì –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n <b>{original_message[0]}</b>\n\n'
                                       f'üó£ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n <b><i>{message.text}</i></b>',
                                       parse_mode='HTML')
                await state.clear()
        else:
            if str(user_id) not in map(str, ADMIN_USER_ID):
                if current_state == HelpMessage.message_send.state:
                    user_message = message.text
                    db_message_id = await add_message(user_id, user_message)
                    await state.update_data(message_id=db_message_id, chat_id=message.chat.id, message_send=True)
                    await message.reply(f'‚úÖ–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}" –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')
                    await state.clear()
                else:
                    await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–º–æ—â—å‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')