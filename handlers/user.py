from aiogram import Router, F, Bot
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from app.database import (add_user, check_user_or_registr, get_history,
                          get_blocked_user_message, get_black_list,
                          respond_to_message, get_chat_id, get_message, add_message)
from app.keyboards import user_keyboard_after_login, banned_user, admin_keyboard, company_info
from config import ADMIN_USER_ID
from handlers.help import HelpMessage, AnswerMessage

black_list = []
router = Router()


@router.message(F.contact)
async def login(message: Message):
    user_id = message.from_user.id
    check = await check_user_or_registr(user_id)
    id = str(user_id)
    msg = await get_blocked_user_message(id)
    black_list = await get_black_list()
    if check:
        if id in ADMIN_USER_ID:
            await message.answer('üëã–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, <b>' + message.from_user.full_name + '</b>',
                                 parse_mode='HTML', reply_markup=admin_keyboard)
        elif id in black_list:
            await message.reply(f'üè¥–£–≤—ã, –≤—ã –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ :(\n–∑–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}')
            return
        else:
            await message.answer('üëã–†–∞–¥—ã –≤–∞—Å –≤–∏–¥–µ—Ç—å —Å–Ω–æ–≤–∞, <b>' + message.from_user.full_name + '</b>',
                                 parse_mode='HTML', reply_markup=user_keyboard_after_login)
    else:
        await add_user(user_id, message.from_user.username, message.contact.phone_number, message.from_user.full_name)
        await message.answer(f'‚úîÔ∏è–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, <b>{message.from_user.full_name}</b>!',
                             parse_mode='HTML', reply_markup=user_keyboard_after_login)


@router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤')
async def history(message: Message):
    user = message.from_user.id
    history = await get_history(user)
    if history:
        user_history = "\n".join([f'‚ùì: <b>{messages[0]}</b>\nüîé: <i>{messages[1]}</i> \n \n' for messages in history])
        await message.answer(user_history, parse_mode='HTML')
    else:
        await message.answer('üò≠–í—ã –µ—â–µ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è\nü¶æ—É–∂–µ —Ä–∞–∑–±–∏—Ä–∞–µ–º—Å—è <b>:(</b>',
                             parse_mode='HTML')


@router.message(Command("help"))
async def help_command(message: Message, state: FSMContext):
    await state.set_state(HelpMessage.message_send)
    await message.reply('–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏. üõ†')


@router.message(F.text == '–ü–æ–º–æ—â—å')
async def help_button(message: Message, state: FSMContext):
    user_id = message.from_user.id
    black_list = await get_black_list()
    if user_id in black_list:
        await message.answer('–í—ã –∑–∞–±–∞–Ω–µ–Ω—ã', reply_markup=banned_user)
    else:
        await help_command(message, state)


@router.message(F.text == '–û –∫–æ–º–ø–∞–Ω–∏–∏')
async def info(message: Message):
    await message.reply('–¢—É—Ç –±–æ–ª—å—à–∞—è –∏—Å—Ç–æ—Ä–∏—è', reply_markup=company_info)


@router.message(F.text == '–ù–æ–≤–æ—Å—Ç–∏ "–¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç–∏"')
async def investors(message: Message):
    await message.reply('–ù–æ–≤–æ—Å—Ç–∏')


@router.message(F.text == '–ö–ª–∏–µ–Ω—Ç–∞–º')
async def clients(message: Message, bot: Bot):
    await message.reply('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n'
                        '–û—Ç–¥–µ–ª –¥–µ–ª–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞\n'
                        '–¢–µ–ª–µ—Ñ–æ–Ω—ã: +7 (3953) 300-701, +7 (3953) 300-709\n'
                        'Email: vsmn@vsmn.transneft.ru')
    await bot.send_location(message.from_user.id, 56.313259, 101.739587)


@router.message(F.text)
async def handle_message(message: Message, state: FSMContext, bot: Bot):
    await bot.send_chat_action(message.from_user.id, action="typing")
    data = await state.get_data()
    current_state = await state.get_state()
    user_id = message.from_user.id
    black_list = await get_black_list()

    if str(user_id) in black_list:
        await message.reply('–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.')
        return

    if current_state == AnswerMessage.waiting_for_reply.state:
        if str(user_id) in map(str, ADMIN_USER_ID):
            db_message_id = data['message_id']
            await respond_to_message(db_message_id, message.text)
            await message.reply(f'‚úÖ–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {db_message_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.')
            user_chat_id = await get_chat_id(db_message_id, 1)
            original_message = await get_message(db_message_id, 1)
            await bot.send_message(
                user_chat_id[0],
                f'‚ùì –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n <b>{original_message[0]}</b>\n\n'
                f'üó£ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n <b><i>{message.text}</i></b>',
                parse_mode='HTML'
            )
            await state.clear()
    elif str(user_id) not in map(str, ADMIN_USER_ID):
        if current_state == HelpMessage.message_send.state:
            user_message = message.text
            db_message_id = await add_message(user_id, user_message)
            await state.update_data(message_id=db_message_id, chat_id=message.chat.id, message_send=True)
            await message.reply(f'‚úÖ–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "{user_message}" –ø–æ–ª—É—á–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.')
            await state.clear()
        else:
            await message.answer('–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ü–æ–º–æ—â—å‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è')
